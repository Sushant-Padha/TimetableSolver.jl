var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"For detailed explanation about some of the internal code, see Explanation.","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/solver/#Solver","page":"Solver","title":"Solver","text":"","category":"section"},{"location":"reference/solver/","page":"Solver","title":"Solver","text":"Modules = [TimetableSolver]\nPages   = [\"solver.jl\"]","category":"page"},{"location":"reference/solver/#TimetableSolver.VarRefOrExpr","page":"Solver","title":"TimetableSolver.VarRefOrExpr","text":"VarRefOrExpr = Union{VariableRef,AffExpr}\n\nRepresents either a model variable reference or expression reference.\n\nAlias for union of VariableRef and AffExpr.\n\n\n\n\n\n","category":"type"},{"location":"reference/solver/#TimetableSolver.VariableData","page":"Solver","title":"TimetableSolver.VariableData","text":"VariableData\n\nImmutable struct to store data related to divisions, variables and values, and their mappings from ints to strings, because the solver only works on ints.\n\nConstructors\n\nVariableData(schedule::Schedule)::VariableData\n\nFields:\n\ndivvarval_maps::OrderedDict{Symbol,OrderedDict}: Keys are a symbol :subject or :teacher.\n\nValues are map of ints (div) to 2-tuple of vecs of ints (var, val).\n\ndivvarval_mapstrs::OrderedDict{Symbol,OrderedDict}: Same as div_var_val_map but with strings instead of ints.\nalldivs::Vector{Int}: Vector of all divs as ints.\nallvars::Vector{Int}: Vector of all vars as ints. (no :subject :teacher bifurcation)\nallvals::Vector{Int}: Vector of all vals as ints. (no :subject :teacher bifurcation)\ndivmap::OrderedDict{Int,String}: Map from div ints to strings.\nvarmap::OrderedDict{Int,String}: Map from variable ints to strings.\nvalmap::OrderedDict{Int,String}: Map from values ints to strings.\ninversedivmap::OrderedDict{String,Int}: Inverted divmap.\ninversevarmap::OrderedDict{String,Int}: Inverted varmap.\ninversevalmap::OrderedDict{String,Int}: Inverted valmap.\nschedule::Schedule: Schedule type instance.\n\n\n\n\n\n","category":"type"},{"location":"reference/solver/#TimetableSolver.applysolution!-Tuple{Schedule, OrderedCollections.OrderedDict{String, String}}","page":"Solver","title":"TimetableSolver.applysolution!","text":"applysolution!(schedule::Schedule, solution::OrderedDict{String,String})::Nothing\n\nApply a solution (of strings) to the given schedule.\n\nNotes\n\nModify the schedule in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/solver/#TimetableSolver.convertsolution-Tuple{OrderedCollections.OrderedDict{Int64, Int64}, VariableData}","page":"Solver","title":"TimetableSolver.convertsolution","text":"convertsolution(rawsolution::OrderedDict{Int,Int}, vardata::VariableData)::OrderedDict{String,String}\n\nReturn a solution in the form of a mapping from variable to its value (both as strings).\n\nNotes\n\nConvert an Int=>Int solution to a String=>String one using the inverse* mappings defined in vardata.\n\n\n\n\n\n","category":"method"},{"location":"reference/solver/#TimetableSolver.define_constraints!-Tuple{JuMP.Model, OrderedCollections.OrderedDict, VariableData}","page":"Solver","title":"TimetableSolver.define_constraints!","text":"define_constraints!(m::Model, modelvars::OrderedDict, vardata::VariableData)::Nothing\n\nDefine all constraints in the model m using the vardata object and the model variables modelvars.\n\nNotes\n\nModify the model m in place.\nCall define_subjectconstraints!, define_subjectteacherconstraints!\n\nand define_teacherconstraints! internally, in the respective order.\n\n\n\n\n\n","category":"method"},{"location":"reference/solver/#TimetableSolver.define_subjectconstraints!-Tuple{JuMP.Model, OrderedCollections.OrderedDict, VariableData}","page":"Solver","title":"TimetableSolver.define_subjectconstraints!","text":"define_subjectconstraints!(m::Model, modelvars::OrderedDict, vardata::VariableData)::Nothing\n\nDefine subject constraints in the model m using the vardata object and the model variables modelvars.\n\nNotes\n\nModify the model m in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/solver/#TimetableSolver.define_subjectteacherconstraints!-Tuple{JuMP.Model, OrderedCollections.OrderedDict, VariableData}","page":"Solver","title":"TimetableSolver.define_subjectteacherconstraints!","text":"define_subjectteacherconstraints!(m::Model, modelvars::OrderedDict, vardata::VariableData)::Nothing\n\nDefine subject-teacher constraints in the model m using the vardata object and the model variables modelvars.\n\nNotes\n\nModify the model m in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/solver/#TimetableSolver.define_teacherconstraints!-Tuple{JuMP.Model, OrderedCollections.OrderedDict, VariableData}","page":"Solver","title":"TimetableSolver.define_teacherconstraints!","text":"define_teacherconstraints!(m::Model, modelvars::OrderedDict, vardata::VariableData)::Nothing\n\nDefine teacher constraints in the model m using the vardata object and the model variables modelvars.\n\nNotes\n\nModify the model m in place.\n\n\n\n\n\n","category":"method"},{"location":"reference/solver/#TimetableSolver.define_variables!-Tuple{JuMP.Model, VariableData}","page":"Solver","title":"TimetableSolver.define_variables!","text":"define_variables!(m::Model, vardata::VariableData)::OrderedDict{Int,VarRefOrExpr}\n\nDefine variables in the model m using the vardata object. Return an OrderedDict mapping the int representation of the variable to the variable reference/expression reference.\n\nNotes\n\nModify the model m in place.\nSee VarRefOrExpr.\n\n\n\n\n\n","category":"method"},{"location":"reference/solver/#TimetableSolver.get_model","page":"Solver","title":"TimetableSolver.get_model","text":"get_model(vardata::VariableData, timeout::Float64=Inf, all_solutions::Bool=false)::Tuple{Model,OrderedDict}\n\nReturn a JuMP model created using vardata, and an OrderedDict of the variables defined in the model.\n\nArguments\n\nvardata::VariableData: VariableData object representing the variables and constraints to be added to the model.\ntimeout::Float64=Inf: Float representing the maximum time to run the model.\nall_solutions::Bool=false: Bool representing whether to return all solutions or just the first.\n\nNotes\n\nCreate a model with the correct variables, and adds constraints to the model.  \nThe variables defined are anonymous, so they are stored in an OrderedDict mapped to their int representation.\n\n\n\n\n\n","category":"function"},{"location":"reference/solver/#TimetableSolver.get_solution-Tuple{JuMP.Model, OrderedCollections.OrderedDict, VariableData}","page":"Solver","title":"TimetableSolver.get_solution","text":"get_solution(m::Model, modelvars::OrderedDict, vardata::VariableData)::Tuple{OrderedDict{Int,Int},MOI.TerminationStatusCode}\n\nReturn a solution and status code after solving the given model m and using model variables modelvars and variable data vardata to access the solution values.\n\nNotes\n\nModel is optimally solved only if the status code is MOI.OPTIMAL.\nSolution is a mapping from variable to its value (both as ints).\n\n\n\n\n\n","category":"method"},{"location":"reference/solver/#TimetableSolver.solve!","page":"Solver","title":"TimetableSolver.solve!","text":"solve!(schedule::Schedule, timeout::Float64 = Inf, all_solutions::Bool = false)::Tuple{OrderedDict{String,String},MOI.TerminationStatusCode}\n\nSolve a given schedule in place and return a String=>String solution and status code.\n\nArguments\n\nschedule::Schedule: Schedule object representing the problem.\ntimeout::Float64=Inf: Float representing the maximum time to run the model.\nall_solutions::Bool=false: Bool representing whether to return all solutions or just the first.\n\nNotes\n\nSchedule is optimally solved only if the status code is MOI.OPTIMAL.\n\n\n\n\n\n","category":"function"},{"location":"explanation/#Explanation","page":"Explanation","title":"Explanation","text":"","category":"section"},{"location":"explanation/","page":"Explanation","title":"Explanation","text":"Explanation of some of the internal code.","category":"page"},{"location":"reference/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"reference/types/","page":"Types","title":"Types","text":"Modules = [TimetableSolver]\nPages   = [\"types.jl\"]","category":"page"},{"location":"reference/types/#TimetableSolver.Division","page":"Types","title":"TimetableSolver.Division","text":"Division\n\nType for representing a division of a timetable.\n\nConstructors\n\nDivision(grade::Int, section::Int)  \nDivision(grade::Int, section::Int, section_str::String)\n\nFields\n\ngrade::Int: The grade of the division.\nsection::Int: The section of the division.\nsection_str::String: The section of the division as a string.\n__str__::String: The precomputed string representation of the division.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#TimetableSolver.Period","page":"Types","title":"TimetableSolver.Period","text":"Period\n\nMutable type for representing a period in the timetable. Empty period is initialized with nothing as both arguments.\n\nFields\n\nsubject::Union{String,Nothing}: The subject of the period.\nteacher::Union{Teacher,Nothing}: The teacher of the period.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#TimetableSolver.Schedule","page":"Types","title":"TimetableSolver.Schedule","text":"Schedule\n\nMutable type for representing a schedule, i.e., a collection of timetables.\n\nConstructors\n\nSchedule(timetables...)\n\nFields\n\ndata::OrderedDict{String,Timetable}: The timetables in the schedule mapped to their division's string representation.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#TimetableSolver.SubjectCounts","page":"Types","title":"TimetableSolver.SubjectCounts","text":"SubjectCounts\n\nType for counting the number of times each subject appears in a timetable.\n\nAlias for OrderedDict{String, Int}.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#TimetableSolver.Teacher","page":"Types","title":"TimetableSolver.Teacher","text":"Teacher\n\nType for representing a teacher in the timetable.\n\nConstructors\n\nTeacher(name::String, id::String, subjects::Vector{String}, grades::Vector{Int})\n\nFields\n\nname::String: The name of the teacher.\nid::String: The unique id of the teacher.\nsubjects::Vector{String}: The subjects taught by the teacher.\ngrades::Vector{Int}: The grades taught by the teacher.\n__str__::String: The precomputed string representation of the teacher.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#TimetableSolver.Timetable","page":"Types","title":"TimetableSolver.Timetable","text":"Timetable\n\nMutable type for representing a timetable.\n\nConstructors\n\nTimetable(numperiods::Vector{Int}, subjectcounts::SubjectCounts, teachers::Vector{Teacher}, division::Division)\n\nFields\n\nnumperiods::Vector{Int}: The number of periods in each row.\nsubjectcounts::SubjectCounts: The number of times subjects must occur in the timetable, in total.\nsubjects::Vector{String}: The subjects in the timetable.\nteachers::Vector{Teacher}: The teachers in the timetable.\nsubjectteachers::OrderedDict{String, Vector{Teacher}}: The teachers teaching each subject.\nteacher_strs::OrderedDict{String, Teacher}: The teachers' string representations mapped to objects.\ndivision::Division: The division of the timetable.\ndata::Vector{Vector{Period}}: The timetable data, as a vector of vectors of periods.\n\nNotes\n\nOnly fields numperiods, subjectcounts, teachers and division are passed. The rest are inferred.\nSee the constructor for the same.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#Base.string-Tuple{Schedule}","page":"Types","title":"Base.string","text":"Base.string(s::Schedule)::String\n\nBase.string method for type Schedule.\n\nReturn pretty table representation of the timetables.\n\nNotes\n\nCall the Base.string method for each timetable in the schedule and fill newlines in between.\n\n\n\n\n\n","category":"method"},{"location":"reference/types/#Base.string-Tuple{Timetable}","page":"Types","title":"Base.string","text":"Base.string(tt::Timetable)::String\n\nBase.string method for type Timetable.\n\nReturn a pretty table representation of the timetable.\n\nNotes\n\nUse the PrettyTables library to return a table-like string.\nRows are numbered from 1 to length(data) and columns are numbered P1, P2 ... to longest row in data (max(length.(data)...)).\nColumn 1 header is the division name.\nCall division and teacher's Base.string method for string representation. \n\n\n\n\n\n","category":"method"},{"location":"reference/types/#TimetableSolver.modify!-Tuple{Schedule, String, String}","page":"Types","title":"TimetableSolver.modify!","text":"modify!(s::Schedule, var::String, val::String)\n\nModify schedule s by replacing the value of the field var with val.\n\nNotes\n\nModify the schedule s in place.\nBoth var and val are strings.\nCall modify!() on the correct timetable in s with the same arguments.\n\n\n\n\n\n","category":"method"},{"location":"reference/types/#TimetableSolver.modify!-Tuple{Timetable, String, String}","page":"Types","title":"TimetableSolver.modify!","text":"modify!(tt::Timetable, var::String, val::String)\n\nModify timetable tt by replacing the value of the field var with val.\n\nNotes\n\nModify the timetable tt in place.\nBoth var and val are strings.\nRow, period and type of variable are inferred by splitting var at \"_\", and taking last 3 elements.\nIf type == \"subject\" then the subject of the corresponding row and period is set to val.\nIf type == \"teacher\" then the teacher of the corresponding row and period is set to val\n\n(after getting teacher object from teacher string using tt.teacher_strs).\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TimetableSolver","category":"page"},{"location":"#TimetableSolver","page":"Home","title":"TimetableSolver","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TimetableSolver.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the following pages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Tutorial: A simple tutorial to create a full model.\nHow-To: A quick and simple way to get started.\nExplanation: Explanation of some of the internal code.\nReference: Source code docs.","category":"page"},{"location":"how_to/#How-To","page":"How-To","title":"How To","text":"","category":"section"},{"location":"how_to/","page":"How-To","title":"How-To","text":"A quick and simple way to get started.","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This is a tutorial to create your own timetables and solve them using the package.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This assumes that you have a compatible, working Julia version installed on your system, and have a basic understanding of the language.","category":"page"},{"location":"tutorial/#Installation","page":"Tutorial","title":"Installation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Open up a Julia REPL, and type","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"] add TimetableSolver","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The package is installed.","category":"page"},{"location":"tutorial/#Usage","page":"Tutorial","title":"Usage","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"After installing, use the package with:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using TimetableSolver","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now, everything defined in the package will available to use which can be used to model our data.","category":"page"},{"location":"tutorial/#Data","page":"Tutorial","title":"Data","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's create a fictional timetable with some data to represent and solve using this package.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We have two divisions of students: 9-C, and 10-D.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"They both have a timetable for two days of a week, with 3 periods on the first day and 2 periods on the second day. So, a total of 5 periods over 2 days.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We have 5 teachers:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Mark: teaches math and science to grades 9 and 10\nJohn: teaches math to grade 9\nGeeta: teaches english to grade 9 and 10\nPaul: teaches physical education to grade 9\nJane: teachers science to grade 10","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Grade 9-C, has 2 math periods, 2 english periods and 1 physical education period in their timetable.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Grade 10-D, has 2 math periods, 1 english period and 2 science periods in their timetable.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To keep it simple, any teacher can teach any division as long as they are qualified for the grade (can be changed in your model).   So, Mark can teach math to division 10-D and 9-C (because he teaches grade 9 and 10) but John can only teach division 9-C.","category":"page"},{"location":"tutorial/#Modelling-Data","page":"Tutorial","title":"Modelling Data","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now, we need to model the data for our own timetable into the language, using the types provided by the package.","category":"page"},{"location":"tutorial/#Subjects","page":"Tutorial","title":"Subjects","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To represent a subject, just use a string. Make sure the same string is used everywhere.   To be regular, try to use all uppercase strings.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# ! not actual code just a demo\n\"MATH\" \"ENG\"    # this is correct\n\"math\" \"eng\"    # this is also correct\n\"mATh\" \"enG\"    # this is not recommended\n:MATH ENG       # this is wrong","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Note that you can use \"ENG\" for english and \"PHYSICAL\" for physical education, but make sure that you reuse the exact same strings later in the code.","category":"page"},{"location":"tutorial/#Subject-Counts","page":"Tutorial","title":"Subject Counts","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The SubjectCounts is used to represent an ordered dictionary of, subjects mapped to the number of times they should occur in a timetable (alias for OrderedDict{String,Int}).   So, for our data, the subject counts will look like:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"subjectcounts_C9 = SubjectCounts(\n    \"MATH\"=>2, \"ENG\"=>2, \"SPORTS\"=>1\n)\nsubjectcounts_D10 = SubjectCounts(\n    \"MATH\"=>2, \"ENG\"=>1, \"SCIENCE\"=>2\n)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"subjectcounts_C9 represents the subject counts for grade 9-C (use C9 instead of 9C read more).   subjectcounts_D10 represents the same about grade 10-D.","category":"page"},{"location":"tutorial/#Division","page":"Tutorial","title":"Division","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The Division type is used to represent a division of students. It stores two fields: grade and section (both integers).   For our data, the divisions can be represented as:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"C9 = Division(9, 3)\nD10 = Division(10, 4)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"warning: Naming a division variable\nWhen you create a division variable, try naming it with the section first, i.e., C9 instead of 9C.   Declaring variables starting with a number is not recommended and can lead to unintended consequences.","category":"page"},{"location":"tutorial/#Teacher","page":"Tutorial","title":"Teacher","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The Teacher type is used to represent a teacher with all of the data related to them. To create a Teacher instance, pass the following arguments (example from #Data for teacher Mark):","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Name: \"Mark Andrews\", string representing the name of the teacher, can be anything you want it does not affect the model in any way\nId: \"MARK\", string representing the id of the teacher, this is the id that is used by the model. It must be unique.   This is the string that is returned at the end when the model is solved. Try to use all uppercase letters, and keep the id's short.\nSubjects: [\"MATH\",\"SCIENCE\"], a list of all subjects that the teacher can teach\nGrades: [9,10], a list of all grades that a teacher can teach [1]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For the full data, all the teachers can be represented by:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"mark = Teacher(\"Mark Andrews\",  \"MARK\",     [\"MATH\",\"SCIENCE\"], [9, 10])\njohn = Teacher(\"John Curry\",    \"JOHN\",     [\"MATH\"],           [9])\ngeeta = Teacher(\"Geeta Gupta\",  \"GGA\",      [\"ENG\"],            [9, 10])\npaul = Teacher(\"Paul Reid\",     \"PAUL\",     [\"SPORTS\"],         [9])\njane = Teacher(\"Jane Murphy\",   \"JANE\",     [\"SCIENCE\"],        [10])","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Note that mark now represents a teacher instance, with all the data added. \"MARK\" is just a string representing his id, that will be used for solving and displaying the solution.","category":"page"},{"location":"tutorial/#Period","page":"Tutorial","title":"Period","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The Period type is used represent a single period in one day of a timetable. It stores two fields: the subject (being taught) and the teacher (teaching the subject).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You won't have to use this in the code as it is only referenced internally, so you do not need to use or define it.","category":"page"},{"location":"tutorial/#Timetable","page":"Tutorial","title":"Timetable","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The Timetable type is used to represent the actual timetable for a division.   To create a Timetable instance, pass the following arguments (examples from #Data for grade 9-C):","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Number of Periods: [3, 2], 3 periods on the first day and 2 periods on the second day\nSubject Counts: subjectcounts_C9, defined in #Subject Counts\nTeachers: [mark, john, geeta, paul], a list of some of the teachers we defined in #Teacher.   jane is not added because she teaches science which is not a valid subject for grade 9. We can add her to the list, but it won't affect anything or be of any use.   Do note however, that we have added mark as a teacher even though john already is added (both teach math). This is done so that in case a conflict arises, where john cannot teach this division because he has a period in another one, mark can teach for that period in the model.   In our case, this won't happen due to the simplicity of the model, but in bigger problems, this should be used to make solving easier.\nDivision: C9, the division representing 9-C we defined in #Division","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For the full data, all the timetables can be represented by:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"tt_C9 = Timetable(\n    [3, 2],\n    subjectcounts_C9,\n    [mark, john, geeta, paul],\n    C9\n)\ntt_D10 = Timetable(\n    [3, 2],\n    subjectcounts_D10,\n    [mark, geeta, jane],\n    D10\n)","category":"page"},{"location":"tutorial/#Schedule","page":"Tutorial","title":"Schedule","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The Schedule type is used to represent a full schedule of all timetables. This is the most high level type in the package. You should only create one schedule for a problem (schedule is synonymous with model here), and add all your timetables to it.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For our data, the schedule will be created as:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"schedule = Schedule(tt_C9, tt_D10)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"[1]: Division represents a group of students studying together. It is a combination of a grade and a section. So, 9-C and 9-D are different divisions, but have the same grade. Grade is just the level at which the students study, like grade 10, 11. It is represented by a simple integer where needed.","category":"page"}]
}
